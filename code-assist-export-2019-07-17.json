{
  "categories" : [ {
    "alternativeNames" : "None",
    "count" : [ {
      "examples" : [ 16, null, 28, null, 29, null, 30, null, 31, null, 32, null, 33, null, 34, null, 35, null, 36, null, 37, null, 38, null, 39, null, 40, null, 41, null, 42, null, 43 ]
    } ],
    "createdBy" : "0",
    "dateCreated" : "2016-01-01T00:00:00-05:00",
    "dateEdited" : "2016-01-01T00:00:00-05:00",
    "description" : "",
    "editedBy" : "0",
    "id" : "0",
    "isTopLevel" : true,
    "key" : "0",
    "name" : "Conditional",
    "parentCategory" : "None",
    "subCategoryIDs" : [ "1", "2", "15" ]
  }, {
    "alternativeNames" : "None",
    "createdBy" : "0",
    "dateCreated" : "2016-01-01T00:00:00-05:00",
    "dateEdited" : "2016-01-01T00:00:00-05:00",
    "description" : "",
    "editedBy" : "0",
    "id" : "1",
    "isTopLevel" : false,
    "key" : "1",
    "name" : "If Statement",
    "parentCategory" : "0",
    "relatedCategoryIDs" : [ 15 ],
    "subCategoryIDs" : "None"
  }, {
    "alternativeNames" : "None",
    "createdBy" : "0",
    "dateCreated" : "2016-01-01T00:00:00-05:00",
    "dateEdited" : "2016-01-01T00:00:00-05:00",
    "description" : "",
    "editedBy" : "0",
    "id" : "2",
    "isTopLevel" : false,
    "key" : "2",
    "name" : "While Loop",
    "parentCategory" : "0",
    "relatedCategoryIDs" : [ 15 ],
    "subCategoryIDs" : "None"
  }, {
    "alternativeNames" : "None",
    "createdBy" : "0",
    "dateCreated" : "2016-01-01T00:00:00-05:00",
    "dateEdited" : "2016-01-01T00:00:00-05:00",
    "description" : "These are data types.",
    "editedBy" : "0",
    "id" : "3",
    "isTopLevel" : true,
    "key" : "3",
    "name" : "Data Types",
    "parentCategory" : "None",
    "subCategoryIDs" : [ "4", "5", "13", "14" ]
  }, {
    "alternativeNames" : "None",
    "count" : {
      "0" : {
        "syntaxes" : [ 0 ]
      },
      "5" : {
        "examples" : [ 2, 3 ],
        "syntaxes" : [ 1 ]
      }
    },
    "createdBy" : "0",
    "dateCreated" : "2016-01-01T00:00:00-05:00",
    "dateEdited" : "2016-01-01T00:00:00-05:00",
    "description" : "Strings are just like text. They are a collection of characters.",
    "editedBy" : "0",
    "id" : "4",
    "isTopLevel" : false,
    "key" : "4",
    "name" : "String",
    "parentCategory" : "3",
    "relatedCategoryIDs" : "None",
    "subCategoryIDs" : "None"
  }, {
    "alternativeNames" : "None",
    "createdBy" : "0",
    "dateCreated" : "2016-01-01T00:00:00-05:00",
    "dateEdited" : "2016-01-01T00:00:00-05:00",
    "description" : "Integers represent whole numbers. This means 0 to a large number, with no decimals or fractions. Arithmetic can be applied to integers.",
    "editedBy" : "0",
    "id" : "5",
    "isTopLevel" : false,
    "key" : "5",
    "name" : "Integer",
    "parentCategory" : "3",
    "relatedCategories" : "None",
    "subCategoryIDs" : "None"
  }, {
    "alternativeNames" : "None",
    "count" : [ {
      "examples" : [ 5, 6 ],
      "syntaxes" : [ 4, null, 20 ]
    }, {
      "syntaxes" : [ 13 ]
    }, null, null, null, {
      "examples" : [ 8 ],
      "syntaxes" : [ 7 ]
    }, null, {
      "examples" : [ 24, null, 25, null, 26, null, 27 ]
    } ],
    "createdBy" : "0",
    "dateCreated" : "2016-01-01T00:00:00-05:00",
    "dateEdited" : "2016-01-01T00:00:00-05:00",
    "description" : "A function is a type of procedure or routine. Some programming languages make a distinction between a function, which returns a value, and a procedure, which performs some operation but does not return a value. Most programming languages come with a prewritten set of functions that are kept in a library.",
    "editedBy" : "0",
    "id" : "6",
    "isTopLevel" : true,
    "key" : "6",
    "name" : "Function",
    "parentCategory" : "None",
    "relatedCategories" : "None",
    "subCategoryIDs" : [ "7" ]
  }, {
    "alternativeNames" : "None",
    "count" : {
      "6" : {
        "examples" : [ 9, 10 ],
        "syntaxes" : [ 12, 11 ]
      },
      "7" : {
        "syntaxes" : [ 45 ]
      }
    },
    "createdBy" : "0",
    "dateCreated" : "2016-12-02T11:22:36-05:00",
    "dateEdited" : "2016-12-02T11:22:36-05:00",
    "description" : "A map will split an array or object into individual components, and runs a function on each component.",
    "editedBy" : "0",
    "id" : "7",
    "key" : "7",
    "name" : "Map",
    "parentCategory" : "6",
    "subCategoryIDs" : [ "9" ]
  }, {
    "alternativeNames" : "None",
    "createdBy" : "0",
    "dateCreated" : "2016-12-02T11:24:43-05:00",
    "dateEdited" : "2016-12-02T11:24:43-05:00",
    "description" : "dfdd",
    "editedBy" : "0",
    "id" : "8",
    "isTopLevel" : true,
    "key" : "8",
    "name" : "Test",
    "parentCategory" : "None",
    "relatedCategoryIDs" : [ 7, 9 ],
    "subCategoryIDs" : [ "10" ]
  }, {
    "alternativeNames" : "None",
    "createdBy" : "0",
    "dateCreated" : "2016-12-02T11:58:09-05:00",
    "dateEdited" : "2016-12-02T11:58:09-05:00",
    "description" : "sdfsdf",
    "editedBy" : "0",
    "id" : "9",
    "isTopLevel" : false,
    "key" : "9",
    "name" : "Test2",
    "parentCategory" : "7",
    "relatedCategoryIDs" : [ 7, 8 ],
    "subCategoryIDs" : "None"
  }, {
    "alternativeNames" : "None",
    "createdBy" : "0",
    "dateCreated" : "2016-12-13T12:09:37-05:00",
    "dateEdited" : "2016-12-13T12:09:37-05:00",
    "description" : "",
    "editedBy" : "0",
    "id" : "10",
    "isTopLevel" : false,
    "key" : "10",
    "name" : "Test3",
    "parentCategory" : "8",
    "relatedCategoryIDs" : "None",
    "subCategoryIDs" : [ "11" ]
  }, {
    "alternativeNames" : "None",
    "createdBy" : "0",
    "dateCreated" : "2016-12-13T12:09:46-05:00",
    "dateEdited" : "2016-12-13T12:09:46-05:00",
    "description" : "",
    "editedBy" : "0",
    "id" : "11",
    "isTopLevel" : false,
    "key" : "11",
    "name" : "Test4",
    "parentCategory" : "10",
    "relatedCategoryIDs" : "None",
    "subCategoryIDs" : [ "12" ]
  }, {
    "alternativeNames" : "None",
    "createdBy" : "0",
    "dateCreated" : "2016-12-13T12:09:57-05:00",
    "dateEdited" : "2016-12-13T12:09:57-05:00",
    "description" : "",
    "editedBy" : "0",
    "id" : "12",
    "isTopLevel" : false,
    "key" : "12",
    "name" : "Test5",
    "parentCategory" : "11",
    "relatedCategoryIDs" : "None",
    "subCategoryIDs" : "None"
  }, {
    "alternativeNames" : "None",
    "count" : {
      "0" : {
        "examples" : [ 15 ],
        "syntaxes" : [ 14 ]
      },
      "7" : {
        "syntaxes" : [ 17 ]
      }
    },
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T09:24:49-04:00",
    "dateEdited" : "2017-08-08T09:24:49-04:00",
    "description" : "Variables are placeholders that allow you to assign different values to it.",
    "editedBy" : "0",
    "id" : "13",
    "key" : "13",
    "name" : "Variables",
    "parentCategory" : "3",
    "subCategoryIDs" : "None"
  }, {
    "alternativeNames" : "None",
    "count" : {
      "7" : {
        "examples" : [ 19 ],
        "syntaxes" : [ 18, null, 21 ]
      }
    },
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T09:25:33-04:00",
    "dateEdited" : "2017-08-08T09:25:33-04:00",
    "description" : "Constants are placeholders that allow you to assign a single value to it. This value can then not be changed.",
    "editedBy" : "0",
    "id" : "14",
    "key" : "14",
    "name" : "Constant",
    "parentCategory" : "3",
    "subCategoryIDs" : "None"
  }, {
    "alternativeNames" : "None",
    "count" : {
      "0" : {
        "examples" : [ 22 ]
      },
      "7" : {
        "examples" : [ 23, null, 44 ]
      }
    },
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T09:49:18-04:00",
    "dateEdited" : "2017-08-08T09:49:18-04:00",
    "description" : "A for statement lets something happen as long as the condition is true. ",
    "editedBy" : "0",
    "id" : "15",
    "key" : "15",
    "name" : "For Statement",
    "parentCategory" : "0",
    "subCategoryIDs" : "None"
  } ],
  "comments" : [ {
    "commentText" : "Sample comment",
    "createdBy" : "0",
    "dateCreated" : "2016-01-01T00:00:00-05:00",
    "exampleActive" : true,
    "exampleID" : "0",
    "id" : "0",
    "key" : "0"
  } ],
  "currentUser" : [ "0" ],
  "examples" : [ {
    "categoryID" : "4",
    "codeText" : "var stringName = 'This is a string'",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2016-01-01T00:00:00-05:00",
    "dateEdited" : "2016-01-01T00:00:00-05:00",
    "description" : "Implicit string",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : "0",
    "image" : "",
    "isActive" : true,
    "key" : "0",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : true
  }, {
    "categoryID" : "4",
    "codeText" : "var stringName: String = 'This is also a string'",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2016-01-01T00:00:00-05:00",
    "dateEdited" : "2016-01-01T00:00:00-05:00",
    "description" : "Explicit string",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : "1",
    "image" : "",
    "isActive" : true,
    "key" : "1",
    "language" : "5",
    "level" : "Intermediate",
    "ranking" : "500",
    "syntax" : true
  }, {
    "categoryID" : "4",
    "codeText" : "var stringName = 'This is a string'",
    "commentIDs" : [ "0" ],
    "createdBy" : "0",
    "dateCreated" : "2016-01-01T00:00:00-05:00",
    "dateEdited" : "2016-01-01T00:00:00-05:00",
    "description" : "Implicit string",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : "2",
    "image" : "",
    "isActive" : true,
    "key" : "2",
    "language" : "5",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "4",
    "codeText" : "var stringName: String = 'This is also a string'",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2016-01-01T00:00:00-05:00",
    "dateEdited" : "2016-01-01T00:00:00-05:00",
    "description" : "Explicit string",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : "3",
    "image" : "",
    "isActive" : true,
    "key" : "3",
    "language" : "5",
    "level" : "Intermediate",
    "ranking" : "500",
    "syntax" : false
  }, {
    "categoryID" : "6",
    "codeText" : "function functionName(arguments){\n\t// runs code\n}",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2016-01-01T00:00:00-05:00",
    "dateEdited" : "2016-01-01T00:00:00-05:00",
    "description" : "Function with arguments",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : "4",
    "image" : "",
    "isActive" : true,
    "key" : "4",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "500",
    "syntax" : true
  }, {
    "categoryID" : "6",
    "codeText" : "var counter = 0;\nfunction addToCounter (){\n\tcounter = counter + 1;\n}",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2016-01-01T00:00:00-05:00",
    "dateEdited" : "2016-01-01T00:00:00-05:00",
    "description" : "Function without an argument",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : "5",
    "image" : "",
    "isActive" : true,
    "key" : "5",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "500",
    "syntax" : false
  }, {
    "categoryID" : "6",
    "codeText" : "var user1 = 'frank';\nvar user2 = 'mike';\n\nfunction welcomeFunction (arg){\n\talert ('welcome '+arg);\n}\n\nwelcomeFunction ('greg');\nwelcomeFunction (user1);",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2016-01-01T00:00:00-05:00",
    "dateEdited" : "2016-01-01T00:00:00-05:00",
    "description" : "Creating a function and calling it",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : "6",
    "image" : "",
    "isActive" : true,
    "key" : "6",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "500",
    "syntax" : false
  }, {
    "categoryID" : "6",
    "codeText" : "func functionName(Parameters) -> returntype {\n\tStatement1\n\tStatement2\n\t---\n\tStatement N\n\treturn parameters\n}",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2016-01-01T00:00:00-05:00",
    "dateEdited" : "2016-01-01T00:00:00-05:00",
    "description" : "Creating a function with a return value",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : "7",
    "image" : "",
    "isActive" : true,
    "key" : "7",
    "language" : "5",
    "level" : "Beginner",
    "ranking" : "500",
    "syntax" : true
  }, {
    "categoryID" : "6",
    "codeText" : "func student(name: String) -> String {\n\treturn name\n}\n\nprintln(student('First Program'))\nprintln(student('About Functions'))",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2016-01-01T00:00:00-05:00",
    "dateEdited" : "2016-01-01T00:00:00-05:00",
    "description" : "Creating a function and calling it",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : "8",
    "image" : "",
    "isActive" : true,
    "key" : "8",
    "language" : "5",
    "level" : "Beginner",
    "ranking" : "500",
    "syntax" : false
  }, {
    "categoryID" : "7",
    "codeText" : "var Hello = React.createClass({\n    render: function() {\n        var names = ['Jake', 'Jon', 'Thruster'];\n        return (\n            <ul>\n                {names.map(function(name, index){\n                    return <li key={ index }>{name}</li>;\n                  })}\n            </ul>\n        )\n    }\n});",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2016-12-02T10:31:19-05:00",
    "dateEdited" : "2016-12-09T13:13:35-05:00",
    "description" : "A map with an internal function.",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : "9",
    "image" : "",
    "isActive" : true,
    "key" : "9",
    "language" : "6",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "7",
    "codeText" : "var Hello = React.createClass({\n    expand: function(name, index) {\n         return <li key={ index }>{name}</li>;\n    },\n    render: function() {\n        var names = ['Jake', 'Jon', 'Thruster'];\n        return (\n            <ul>\n                {names.map(this.expand())}\n            </ul>\n        )\n    }\n});",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2016-12-02T10:34:32-05:00",
    "dateEdited" : "2016-12-09T13:14:06-05:00",
    "description" : "A map with an external function.",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : "10",
    "image" : "",
    "isActive" : true,
    "key" : "10",
    "language" : "6",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "7",
    "codeText" : "arrayOrObject.map(function(item, index){\n      return <li key={ index }>{item}</li>;\n});",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2016-12-02T11:13:13-05:00",
    "dateEdited" : "2016-12-09T13:15:15-05:00",
    "description" : "A map with an internal function.",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : "11",
    "image" : "",
    "isActive" : true,
    "key" : "11",
    "language" : "6",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : true
  }, {
    "categoryID" : "7",
    "codeText" : "arrayOrObject.map(this.functionName.bind(this, index));\narrayOrObject.map(this.functionName.bind(this, variableName));",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2016-12-02T11:41:33-05:00",
    "dateEdited" : "2016-12-09T13:13:08-05:00",
    "description" : "A map to an external function, with binding additional data.",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : "12",
    "image" : "",
    "isActive" : true,
    "key" : "12",
    "language" : "6",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : true
  }, {
    "categoryID" : "6",
    "codeText" : "function functionName() {\n     // code goes here\n}\n\n// run function\nfunctionName();",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2016-12-16T11:19:29-05:00",
    "dateEdited" : "2016-12-16T11:19:29-05:00",
    "description" : "Standard function",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 13,
    "image" : "",
    "isActive" : true,
    "key" : "13",
    "language" : "1",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : true
  }, {
    "categoryID" : "13",
    "codeText" : "var variableName;\nvar variableName = value;",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T09:00:38-04:00",
    "dateEdited" : "2017-08-08T10:00:10-04:00",
    "description" : "The scoping of var variables are function scoped. This means that they are only available inside the function they are created. If a variable is set globally, it is available everywhere and can be updated from everywhere. One unexpected action is if a variable is set inside an if statement, then the variable is considered a global variable instead of the block (the if statement).\n\nThe variable name itself can be called before it's even been created, but it will only return 'undefined' since it won't be able to get the value.",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 14,
    "image" : "",
    "isActive" : true,
    "key" : "14",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : true
  }, {
    "categoryID" : "13",
    "codeText" : "var age = 100;\n\nfunction setWidth() {\n    var width = 100;\n    console.log(width);\n}\nsetWidth();",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T09:15:38-04:00",
    "dateEdited" : "2017-08-08T09:26:41-04:00",
    "description" : "A global variable and a variable only available within a function.",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 15,
    "image" : "",
    "isActive" : true,
    "key" : "15",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "0",
    "codeText" : "var age = 100;\n\nfunction setWidth() {\n    var width = 100;\n    console.log(width);\n}\nsetWidth();",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T09:19:09-04:00",
    "dateEdited" : "2017-08-08T09:19:09-04:00",
    "description" : "aa",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 16,
    "image" : "",
    "isActive" : true,
    "key" : "16",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "13",
    "codeText" : "let variableName = value;",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T09:22:12-04:00",
    "dateEdited" : "2017-08-08T10:00:37-04:00",
    "description" : "The scoping of let variables are block scoped. This means that they are only available inside the block (a function, an if statement, etc) that they are created. If a let variable is set globally, it is available everywhere and can be updated from everywhere.  You can only declare a let variable once in the same scope.\n\nThe variable name itself can not be called before it's even been created.",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 17,
    "image" : "",
    "isActive" : true,
    "key" : "17",
    "language" : "7",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : true
  }, {
    "categoryID" : "14",
    "codeText" : "const variableName = value;",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T09:23:33-04:00",
    "dateEdited" : "2017-08-08T09:36:23-04:00",
    "description" : "A const variable can not be changed once set and can not be deleted. The scoping of const variables are block scoped. This means that they are only available inside the block (a function, an if statement, etc) that they are created. If a const variable is set globally, it is available everywhere. ",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 18,
    "image" : "",
    "isActive" : true,
    "key" : "18",
    "language" : "7",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : true
  }, {
    "categoryID" : "14",
    "codeText" : "const person = {\n    name: 'Alison',\n    age: 25\n}",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T09:35:07-04:00",
    "dateEdited" : "2017-08-08T09:35:07-04:00",
    "description" : "The const variable person can't be reassigned, but the properties inside can be changed. Ex. person.age = 25; will work.",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 19,
    "image" : "",
    "isActive" : true,
    "key" : "19",
    "language" : "7",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "6",
    "codeText" : "(function() {\n   var variableName = value;\n})();",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T09:44:12-04:00",
    "dateEdited" : "2017-08-08T09:44:12-04:00",
    "description" : "An Immediately-Invoked Function Expression (IIFE). A function that runs itself where it creates a scope where nothing will leak into an outside or global scope. ",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 20,
    "image" : "",
    "isActive" : true,
    "key" : "20",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : true
  }, {
    "categoryID" : "14",
    "codeText" : "{\n    const variableName = value;\n}",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T09:45:51-04:00",
    "dateEdited" : "2017-08-08T09:45:51-04:00",
    "description" : "A constant inside a block, which means that it won't leak into any outside scope.",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 21,
    "image" : "",
    "isActive" : true,
    "key" : "21",
    "language" : "7",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : true
  }, {
    "categoryID" : "15",
    "codeText" : "for(var i = 0; i < 10; i++) {\n    console.log(i);\n    setTimeout(function() {\n        console.log('The number is ' + i);\n    },1000);\n}",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T09:52:46-04:00",
    "dateEdited" : "2017-08-08T09:56:03-04:00",
    "description" : "The output will be the numbers 0 to 9, and then ten values of 'The number is 10' after one second. This is because by the time the timeout function is run, the i variable has already changed to be 10.",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 22,
    "image" : "",
    "isActive" : true,
    "key" : "22",
    "language" : "0",
    "level" : "Intermediate",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "15",
    "codeText" : "for(let i = 0; i < 10; i++) {\n    console.log(i);\n    setTimeout(function() {\n        console.log('The number is ' + i);\n    },1000);\n}",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T09:55:43-04:00",
    "dateEdited" : "2017-08-08T09:55:43-04:00",
    "description" : "The output will be the numbers 0 to 9, and then the values of 'The number is ...' with 0 to 9 after one second. This is because of the let variable being of a block scope, which lets the timeout get the values of 0 to 9 instead of only ten 10s.",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 23,
    "image" : "",
    "isActive" : true,
    "key" : "23",
    "language" : "7",
    "level" : "Intermediate",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "6",
    "codeText" : "const names = ['wes', 'kait', 'lux'];\n\n// Standard map function\nconst fullNames = names.map(function(name) {\n    return `${name} bos`;\n});\nconsole.log(fullNames); // ['wes bos', 'kait bos', 'lux bos'];\n\n// Multiple arguments\nconst fullNames2 = names.map((name, i) => {\n    return `${i}: ${name} bos`;\n});\nconsole.log(fullNames2); // ['0: wes bos', '1: kait bos', '2: lux bos'];\n\n// A single argument\nconst fullNames3 = names.map(name => {\n    return `${name} bos`;\n});\nconsole.log(fullNames3); // ['wes bos', 'kait bos', 'lux bos'];\n\n// Implicit return; it assumes that it returns 'name bos';\nconst fullNames4 = names.map(name => `${name} bos`);\nconsole.log(fullNames4); // ['wes bos', 'kait bos', 'lux bos'];\n\n// No arguments\nconst fullNames5 = names.map(() => `cool bos`);\nconsole.log(fullNames5); // ['cool bos', 'cool bos', 'cool bos'];\n\n// Function declaration\nconst sayMyName = (name) => { alert(`Hello ${name}!`) }\nsayMyName('Wes'); // An alert saying 'Hello Wes!'",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T10:22:52-04:00",
    "dateEdited" : "2017-08-08T11:27:12-04:00",
    "description" : "An arrow function.\nIf the arrow function is inside another function, it doesn't rebind the value of 'this' (useful for not needed to save 'this' as a separate variable in order to use it in a child function). Arrow functions are always anonymous functions (ie. it's not named), but they can be put in a variable.\n\nDon't use an arrow function when you really need 'this', when you need a method to bind to an object, when you need to add a prototype method, when you need arguments object.",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 24,
    "image" : "",
    "isActive" : true,
    "key" : "24",
    "language" : "7",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "6",
    "codeText" : "const race = '100m Dash';\nconst winners = ['Hunter Gath', 'Singa Song', 'Imda Bos'];\n\nconst win = winners.map((winner, i) => ({name: winner, race, place: i + 1}))\nconsole.log(win);\n/* [Object {\n\tname: \"Hunter Gath\",\n\tplace: 1,\n\trace: \"100m Dash\"\n}, Object {\n\tname: \"Singa Song\",\n\tplace: 2,\n\trace: \"100m Dash\"\n}, Object {\n\tname: \"Imda Bos\",\n\tplace: 3,\n\trace: \"100m Dash\"\n}]*/\n\n\nconst ages = [23,62,45,234,2,62,234,62,34];\nconst old = ages.filter(age => age >= 60);\nconsole.log(old); // [62, 234, 62, 234, 62]",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T10:33:12-04:00",
    "dateEdited" : "2017-08-08T10:33:12-04:00",
    "description" : "",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 25,
    "image" : "",
    "isActive" : true,
    "key" : "25",
    "language" : "7",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "6",
    "codeText" : "const box = document.querySelector('.box');\nbox.addEventListener('click', function() {\n        this.classList.toggle(first);\n        setTimeout(() => {\n          this.classList.toggle(second);\n        }, 250);\n});",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T11:09:44-04:00",
    "dateEdited" : "2017-08-08T11:09:44-04:00",
    "description" : "We wouldn't use an arrow function on a event listener because otherwise the value of 'this' inside of the listener would just be the window. This is because the arrow function doesn't change 'this'. It is useful on the setTimeout function because we deliberately want to use the 'this' that is in the scope of the listener instead of the scope inside of the timeout.",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 26,
    "image" : "",
    "isActive" : true,
    "key" : "26",
    "language" : "7",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "6",
    "codeText" : "// Original way of checking if an argument has been passed and setting a default value\nfunction calculateBill(total, tax, tip) {\n\tif(tax === undefined) {\n\t\ttax = 0.13;\n\t}\n\ttip = tip || 0.15;\n\treturn total + (total * tax) + (total * tip);\n}\n\nconst totalBill = calculateBill(100);\nconsole.log(totalBill); // 128\n\n\n// ES6 way of setting a default value\nfunction calculateBill2(total, tax = 0.13, tip = 0.15) {\n\treturn total + (total * tax) + (total * tip);\n}\n\nconst totalBill2 = calculateBill2(100);\nconst totalBill3 = calculateBill2(100, undefined, 0.25);\nconsole.log(totalBill2); // 128\nconsole.log(totalBill3); // 138",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T11:19:33-04:00",
    "dateEdited" : "2017-08-08T11:19:33-04:00",
    "description" : "Checking and setting a default value for function arguments.",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 27,
    "image" : "",
    "isActive" : true,
    "key" : "27",
    "language" : "7",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "0",
    "codeText" : "test",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T11:44:32-04:00",
    "dateEdited" : "2017-08-08T11:44:32-04:00",
    "description" : "aa",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 28,
    "image" : "",
    "isActive" : false,
    "key" : "28",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "0",
    "codeText" : "testtt",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T12:34:20-04:00",
    "dateEdited" : "2017-08-08T12:34:20-04:00",
    "description" : "test",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 29,
    "image" : "",
    "isActive" : false,
    "key" : "29",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "0",
    "codeText" : "estese",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T13:40:14-04:00",
    "dateEdited" : "2017-08-08T13:40:14-04:00",
    "description" : "sdf",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 30,
    "image" : "",
    "isActive" : false,
    "key" : "30",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "0",
    "codeText" : "sdffdfdfdfd",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T13:47:29-04:00",
    "dateEdited" : "2017-08-08T13:47:29-04:00",
    "description" : "ddd",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 31,
    "image" : "",
    "isActive" : false,
    "key" : "31",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "0",
    "codeText" : "sssss",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T13:48:42-04:00",
    "dateEdited" : "2017-08-08T13:48:42-04:00",
    "description" : "sdfdf",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 32,
    "image" : "",
    "isActive" : false,
    "key" : "32",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "0",
    "codeText" : "sdfd",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T13:49:19-04:00",
    "dateEdited" : "2017-08-08T13:49:19-04:00",
    "description" : "sss",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 33,
    "image" : "",
    "isActive" : false,
    "key" : "33",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "0",
    "codeText" : "wfefwf",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T13:50:55-04:00",
    "dateEdited" : "2017-08-08T13:50:55-04:00",
    "description" : "erferfw",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 34,
    "image" : "",
    "isActive" : false,
    "key" : "34",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "0",
    "codeText" : "sdsdsdf",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T13:58:25-04:00",
    "dateEdited" : "2017-08-08T13:58:25-04:00",
    "description" : "sdsdsf",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 35,
    "image" : "",
    "isActive" : false,
    "key" : "35",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "0",
    "codeText" : "zxczxc",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T14:01:31-04:00",
    "dateEdited" : "2017-08-08T14:01:31-04:00",
    "description" : "zxccz",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 36,
    "image" : "",
    "isActive" : false,
    "key" : "36",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "0",
    "codeText" : "sdds",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T15:54:34-04:00",
    "dateEdited" : "2017-08-08T15:54:34-04:00",
    "description" : "sdfs",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 37,
    "image" : "",
    "isActive" : false,
    "key" : "37",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "0",
    "codeText" : "asdad",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T16:03:05-04:00",
    "dateEdited" : "2017-08-08T16:03:05-04:00",
    "description" : "asdad",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 38,
    "image" : "",
    "isActive" : false,
    "key" : "38",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "0",
    "codeText" : "sdsdfsdfs",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T16:54:47-04:00",
    "dateEdited" : "2017-08-08T16:54:47-04:00",
    "description" : "fsfdsf",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 39,
    "image" : "",
    "isActive" : false,
    "key" : "39",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "0",
    "codeText" : "sdfsdsd",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T16:56:35-04:00",
    "dateEdited" : "2017-08-08T16:56:35-04:00",
    "description" : "sfdsdf",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 40,
    "image" : "",
    "isActive" : false,
    "key" : "40",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "0",
    "codeText" : "fsdfsdf",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T17:00:27-04:00",
    "dateEdited" : "2017-08-08T17:00:27-04:00",
    "description" : "sdfsd",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 41,
    "image" : "",
    "isActive" : false,
    "key" : "41",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "0",
    "codeText" : "fsdsdf",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T17:11:10-04:00",
    "dateEdited" : "2017-08-08T17:11:10-04:00",
    "description" : "sdfsd",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 42,
    "image" : "",
    "isActive" : true,
    "key" : "42",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "0",
    "codeText" : "fsddfs",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-08-08T17:14:00-04:00",
    "dateEdited" : "2017-08-08T17:14:00-04:00",
    "description" : "dsfsdfs",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 43,
    "image" : "",
    "isActive" : true,
    "key" : "43",
    "language" : "0",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "15",
    "codeText" : "arrayName.map((item, index) => (\n     // functioncode to handle item\n));",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-10-16T15:21:23-04:00",
    "dateEdited" : "2017-10-16T15:21:23-04:00",
    "description" : "",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 44,
    "image" : "",
    "isActive" : true,
    "key" : "44",
    "language" : "7",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : false
  }, {
    "categoryID" : "7",
    "codeText" : "arrayName.map((item, index) => (\n    // function code to handle item\n));",
    "commentIDs" : "None",
    "createdBy" : "0",
    "dateCreated" : "2017-10-16T15:22:51-04:00",
    "dateEdited" : "2017-10-16T15:25:18-04:00",
    "description" : "",
    "editedBy" : "0",
    "embeddedCode" : "",
    "howTo" : false,
    "id" : 45,
    "image" : "",
    "isActive" : true,
    "key" : "45",
    "language" : "7",
    "level" : "Beginner",
    "ranking" : "1000",
    "syntax" : true
  } ],
  "languages" : {
    "css" : {
      "alternativeNames" : [ "Cascading Style Sheets" ],
      "fullName" : "CSS",
      "relatedLanguages" : [ "scss" ]
    },
    "html" : {
      "alternativeNames" : [ "Hypertext Markup Language" ],
      "fullName" : "HTML",
      "relatedLanguages" : "None"
    },
    "javascript" : {
      "alternativeNames" : "None",
      "fullName" : "Javascript",
      "relatedLanguages" : [ "jquery" ]
    },
    "jquery" : {
      "alternativeNames" : "None",
      "fullName" : "jQuery",
      "relatedLanguages" : [ "javascript" ]
    },
    "jsx" : {
      "alternativeNames" : [ "React", "ReactJS", "JSX" ],
      "fullName" : "React JSX",
      "relatedLanguages" : "None"
    },
    "scss" : {
      "alternativeNames" : [ "SASS" ],
      "fullName" : "SCSS",
      "relatedLanguages" : [ "css" ]
    },
    "swift" : {
      "alternativeNames" : "None",
      "fullName" : "Swift",
      "relatedLanguages" : "None"
    }
  },
  "languages2" : [ {
    "alternativeNames" : "None",
    "fullName" : "Javascript",
    "id" : "0",
    "key" : "0",
    "name" : "javascript",
    "relatedLanguages" : [ "jquery" ]
  }, {
    "alternativeNames" : "None",
    "fullName" : "jQuery",
    "id" : "1",
    "key" : "1",
    "name" : "jquery",
    "relatedLanguages" : [ "javascript" ]
  }, {
    "alternativeNames" : [ "Hypertext Markup Language" ],
    "fullName" : "HTML",
    "id" : "2",
    "key" : "2",
    "name" : "html",
    "relatedLanguages" : "None"
  }, {
    "alternativeNames" : [ "Cascading Style Sheets" ],
    "fullName" : "CSS",
    "id" : "3",
    "key" : "3",
    "name" : "css",
    "relatedLanguages" : [ "scss" ]
  }, {
    "alternativeNames" : [ "SASS" ],
    "fullName" : "SCSS",
    "id" : "4",
    "key" : "4",
    "name" : "scss",
    "relatedLanguages" : [ "css" ]
  }, {
    "alternativeNames" : "None",
    "fullName" : "Swift",
    "id" : "5",
    "key" : "5",
    "name" : "swift",
    "relatedLanguages" : "None"
  }, {
    "alternativeNames" : [ "ReactJSX", "React", "ReactJS", "JSX" ],
    "fullName" : "React JSX",
    "id" : "6",
    "key" : "6",
    "name" : "jsx",
    "relatedLanguages" : "None"
  }, {
    "alternativeNames" : [ "ES6", "ECMAScript 6" ],
    "fullName" : "Javascript ES6",
    "id" : "7",
    "key" : "7",
    "name" : "javascript",
    "relatedLanguages" : [ "javascript" ]
  } ],
  "selectedLanguages" : [ "6", "7", "0" ],
  "topCategories" : [ "0", "3", "6", "8" ],
  "users" : [ {
    "commentIDs" : [ "0" ],
    "createdExampleIDs" : [ "0", "1" ],
    "dateSignedUp" : "2016-01-01T00:00:00-05:00",
    "editedExampleIDs" : [ "0", "1" ],
    "email" : "admin@codeassist.com",
    "favouriteLanguages" : "None",
    "favouritesIDs" : "None",
    "id" : "0",
    "key" : "0",
    "password" : "aaa",
    "permissionLevel" : "admin",
    "ranking" : "1000",
    "savedIDs" : "None",
    "socialMedia" : "",
    "username" : "admin"
  } ]
}
